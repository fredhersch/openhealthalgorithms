#!/usr/bin/env python2# -*- coding: utf-8 -*-import mathimport numpy as npimport osimport sysimport jsonfrom __helpers import format_params, convert_cholesterol_unitfrom __utilities import calculate_diabetes_risk, calculate_diabetes_status, high_risk_condition_check, assess_diet, assess_physical_activity, assess_bmi, assess_waist_hip_ratio, assess_smoking_status"""Hearts Guideline OutlineBy default uses the WHO/ISH risk charts"""def calc_cvd_risk(inputParams):    '''    Call the relevant WHO model and compute    '''    return (20, '10-20')def load_guideline_content():    file = 'guideline_content.json'    with open(file) as json_data:        data = json.load(json_data)     return datadef load_guidelines(guideline_key):    file = 'guideline_hearts.json'    with open(file) as json_data:        data = json.load(json_data)    return dataclass HEARTS(object):    """    Runs the HEARTS assessment    """def main():    assessment = {}    #load guidelines    guidelines = load_guidelines('hearts')["body"]    #load message    messages = load_guideline_content()["body"]["messages"]    #load in the response object    with open('request.json') as json_data:        data = json.load(json_data)        #unpack the request, validate it and set up the params    demographics    = data['body']['demographics']    measurements    = data['body']['measurements']    smoking         = data['body']['smoking']    physical_activity = data['body']['physical_activity']    diet_history = data['body']['diet_history']    medical_history = data['body']['medical_history']    pathology = data['body']['pathology']    print('--- Running lifestyle and risk factor assessment ---')    bmi = assess_bmi(measurements['height'], measurements['weight'])    whr = assess_waist_hip_ratio(measurements['waist'], measurements['hip'], demographics['gender'])    diet = assess_diet(diet_history)    exercise = assess_physical_activity(physical_activity)    smoker = assess_smoking_status(smoking)        assessment['lifestyle'] = {        'bmi' : bmi,        'diet' : diet,        'exercise' : exercise,        'smoking' : smoker    }    #print('lifestyle assessment %s ' % assessment['lifestyle'])    print('--- Check diabetes status---')    diabetes_status = calculate_diabetes_status(medical_history, pathology['bsl']['type'], pathology['bsl']['units'], pathology['bsl']['value'])     #print('PRE CHECK diabetes status is %s ' % assessment['diabetes_status'][0])    if not diabetes_status[0]:        #print('diabetes status is %s ' % assessment['diabetes_status'][1])        diabetes_risk = calculate_diabetes_risk(demographics['gender'], demographics['age'], bmi, whr, measurements['sbp'], measurements['dbp'])        #print('diabetes risk is %s ' % assessment['diabetes_risk'])    else:        diabetes_risk = None        #print('diabetes status is %s ' % assessment['diabetes_status'][1])    assessment['diabetes'] = {        'dm_status' : diabetes_status,        'dm_risk' : diabetes_risk    }     print('--- High Risk Condition Check ---')    blood_pressure = {        'sbp' : measurements['sbp'],         'dbp' : measurements['dbp']    }    age = demographics['age']    #work out how to add in diabetes if newly diagnosed?    high_risk_condition = high_risk_condition_check(demographics['age'], blood_pressure, medical_history)     assessment['cvd_assessment'] = {        'high_risk_condition' : high_risk_condition    }    #print('high risk output %s ' % assessment['high_risk'][0])    if not high_risk_condition[0]:        # if not already at high risk then calculate CVD risk        #print('do cvd check')        #use the WHO model to do the cvd risk assessment        cvd_risk = calc_cvd_risk(assessment)        #use the key to look up the guidelines output        assessment['cvd_assessment']['cvd_risk_result'] = cvd_risk        #print(cvd_risk)        assessment['cvd_assessment']['guidelines'] = guidelines['cvd_risk'][cvd_risk[1]]        #print(guidelines['cvd_risk'][assessment['cvd_risk'][1]])    #finally formualate guidelines    print("--- Writing Your Results ----")    with open('response.json', 'w') as fp:        json.dump(assessment, fp)if __name__ == "__main__":    print('---Starting Hearts Assessment----')    main()    