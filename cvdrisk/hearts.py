#!/usr/bin/env python2# -*- coding: utf-8 -*-import mathimport numpy as npimport osimport sysfrom __helpers import format_params, convert_cholesterol_unitfrom __utilities import calculate_diabetes_risk, calculate_diabetes_status, high_risk_condition_check, assess_diet, assess_physical_activity, calculate_bmi, calculate_waist_hip_ratio, assess_smoking_status"""Hearts Guideline OutlineBy default uses the WHO/ISH risk chartsCreated on Fri Feb  3 14:09:44 2017@author: fredherschThis module will be used to calculate the status of diabetes in UNKNOWNIf a person has diabetes in their past history, that should be passed into relevant algorithmsCurrently we are using the Diabetes Risk Score from CGHRAssessment of Diabetes Status is based on IDF / WHO Hearts GuidelinesSteps:        1. Determine whether there is any pathology    2. If pathology, then attempt to calculate diabetes status        - Suspected => has a fasting BSL > 7.1 or a random > 11.1, HbA1c of > 6.5 - Needs to be repeated        - Impaired => has impaired fasting glucose or impaired glucose tolerance. At risk of diabetes. Should be confirmed; BSL > 7.1 AND < 11.1, HbA1c 5.7-6.4        - Normal => BSL is within normal range, HbA1c < 5.7    3. If no pathology, then attempt to calculate risk score using the appropriate algorithm    """#def calcDiabetesStatus(*args):    """// Gender; F = 0, M = 2// Age; if =<30 = 0, 31-40 = 3, >=41 = 4// BMI; <25 = 0, >=25 = 2// WHR; m < 0.9, f < 0.8 = 0; m >= 0.9, f >= 0.8 = 5// HTN; SBP <140, DBP < 90 = 0; SBP >= 140, DBP >= 90 = 2// If score >= 9/15, then should be further evaluated"""'''    define global variables'''def runHeartsAlgo():    global targets    global guidelines    targets = {        'active_time' : 150,        'fruit' : 2,        'vegetables' : 5,        'bp' : 140,        'dm_bp' : 130    }    guidelines = {     }# Utilities - move to separate package'''smoking = {    'current' : 0,    'ex_smoker' : 1,    'quit_within_year' : 1}'''def calcSmokingStatus(smoking):    if smoking['current'] == 1:        return (True, "current smoker")    elif ((smoking['ex_smoker']) & (smoking['quit_within_year'])):        return (True, "ex-smoker, quit within the year")    else:        return (False, "non-smoker OR quit over a year ago")def calcWHR(waist, hip):    whr = waist[0]/hip[0]    print ("whr %s " % whr)    return whrdef calcBMI(height, weight):    bmi = weight[0]/(height[0]*height[0])    print ("BMI is %s " % bmi)    return bmidef calcPhysicalActivity(active_time):    if active_time >= targets['general']['active_time']:        return (True, "on_target")    else:        return (False, "off_target")def calcDiet(diet_history):    print("calculating diet")    print('diet history is %s ' % diet_history)    print('targets are %s ' % targets)        if diet_history['fruit'] < targets['general']['fruit']:        print("Fruit below target")    if ((diet_history['fruit'] < targets['general']['fruit']) and (diet_history['veg'] < targets['general']['vegetables'])):        return (False, "low" ,"Fruit & Vegetables targets not being met")    elif ((diet_history['fruit'] < targets['general']['fruit']) and (diet_history['veg'] >= targets['general']['vegetables'])):        return (False, "mod", "Fruit targets not met, Good work on the veg!")    elif ((diet_history['fruit'] > targets['general']['fruit']) and (diet_history['veg'] < targets['general']['vegetables'])):        return (False, "mod", "Veg targets not met, Good work on the fruit!")    else:        print(diet_history['veg'])        return (True, "high", "Great work, Fruit & Veg targets being met")'''Known heart disease, stroke, transient ischemic attack, DM, kidney disease (for assessment, if this has not been done)Replace these with a lookup table based on concepts (SNOMED or other)Could also integrate with lexigram.io'''def highRiskConditionCheck(conditions):        high_risk_conditions = ['CAD', 'AMI', 'HEART ATTACK', 'CVA', 'TIA', 'STROKE', 'CKD', 'PVD']    # Return whether medical history contains any of these    for condition in conditions:        if condition.upper() in high_risk_conditions:            return (True, 'Has High Risk Condition %s' % condition.upper())    return Falsedef calcDiabetesStatus(conditions, bsl_type, bsl_units, bsl_value):    if bsl_units == 'mg/dl':        bsl_value = round(float(bsl_value)/18, 1)        print('bsl type is %s ' % bsl_type)        print('bsl value is %s ' % bsl_value)    for condition in conditions:        if condition == "diabetes":            return True        else:            if bsl_type == "random":                if bsl_value >= 11.1:                    return (True, "new_diagnosis")                elif bsl_value > 7:                    return (False, "pre_diabetes")                else:                    return (False, "normal")        return Falsedef generateGuidelines():    hearts_guidelines = {    }def calcDiabetesRisk(gender, age, bmi, whr, sbp, dbp):    risk_score = 0        if gender == "M":        risk_score = risk_score + 2        if whr >= 0.9:            risk_score = risk_score + 5    else:        if whr >= 0.8:            risk_score = risk_score + 5            if ((age > 30) & (age < 41)):        risk_score = risk_score + 3    elif age > 40:        risk_score = risk_score + 4        if bmi >= 25:        risk_score = risk_score + 2            # need to clarify this is it & or OR    #  should be the average of two readings    if ((sbp >= 140) or (dbp >= 90)):        risk_score = risk_score + 2        return risk_score'''Calculate the targets based on the input data and algorithms output'''#def calcTargets(inputParams):def calcCVDRisk(inputParams):    return 20"""Sample data""" demographics = {    'gender' : 'F',    'age' : 30,    'dob' : ['computed', '01/10/1987'],    'occupation' : 'office_worker',    'monthly_income' : ''}measurements = {    'height' : [1.5, 'm'],    'weight' : [70.0, 'kg'],    'waist' : [99.0, 'cm'],    'hip' : [104.0, 'cm'],    'sbp' : [145, 'sitting'],    'dbp' : [80, 'sitting']}smoking = {    'current' : 0,    'ex_smoker' : 1,    'quit_within_year' : 0}physical_activity = '120' # minutes per weekdiet_history = {    'fruit' : 1, 'veg' : 6, 'rice' : 2, 'oil' : 'olive'    }medical_history = ['asthma', 'tuberculosis', 'ckd']medications = ['anti_hypertensive', 'statin', 'antiplatelet', 'bronchodilator']family_history = ['cvd']bsl = {    'type' : 'random', 'units' : 'mg/dl', 'value' : 160    }lipids = []global targetsglobal guidelinestargets = {    'general' : {        'active_time' : 150,        'fruit' : 2,        'vegetables' : 5,        'sbp' : 140,        'dbp' : 90,    },    'diabetes' : {        'sbp' : 130,        'dbp' : 80,        'soft_drinks' : 0    },    'hypertension' : {        'sbp' : 120,        'dbp' : 80,        'added_salt' : 0,    }}advice = {    'lifestyle' : 'A healthy diet, regular exercise and reduction in risk factors is key to disease prevention',     'management' : 'Speak to a healthcare professional about:',    'follow_up' : 'You should follow up in '}messages = {    'smoking' : {        'SM-R' : 'For advice on smoking cessation ...'    },    'nutrition' : {        'FV-G' : 'You are eating the recommended amount of fruit and vegetables. Keep it up',        'FV-A' : 'Almost there .. Daily recommended diet is 2 servings of fruit and 5 of vegetables',        'FV-R' : 'A diet rich in fruit and vegetables is recommended. Try for 2 + 5',        'SSF-G' : 'Avoiding foods high in salt & sugar is important to maintaining a healthy diet. Keep up the great work [Share your story]',        'SSF-A' : 'Added sugar Or salt ..',        'SSF-R' : 'Its time to look at what you are eating .. '    },    'physical_activity' : {        'PH-G' : 'You are meeting the recommended amount of exercise (150 minutes per week). Keep it up. [Looking for a community?]',        'PH-A' : 'Keep moving. Remember every bit counts. Aim for 150 minutes of moderate intensity exercsie per week. [Learn more]',        'PH-R' : 'Regular exercise is essential. Aim for 150 minutes per week. Start slow and build up gradually. [Need support?]'    },    'blood_pressure' : {        'BP-Dx-1' : 'You told us you have high blood pressure',        'BP-Rx' : 'You are on medication for your blood pressure',        'BP-G' : 'You are on target. Keep it up',        'BP-A' : 'Your BP is a little on the high side. Follow lifestyle advice and ensure you get a review',        'BP-R' : 'At this level you need a review with a doctor, [Find one now]',        'BP-E' : 'Seek care now'    },    'diabetes' : {        'DM-Dx-1' : 'You told us you have diabetes. [Find a doctor to discuss]',         'BSL-G' : 'Your blood sugar control is good. Maintain a healthy diet ...',        'BSL-A' : 'Your reading indicates a state called \'pre-diabetes\'',        'BSL-R' : 'Looks like you may habe diabetes. [Follow up]'     },    'lipids' : {    },    'cvd_risk' : {        'CVD-HR' : 'You have a high risk condition',        'CVD-G' : 'You are at low risk',        'CVD-A' : 'You are at moderate risk',        'CVD-R' : 'You are at high risk',        'CVD-E' : 'You are at very high risk'    }}# lifestyle = {    ''}guidelines = {    'cvd_risk' : {            '<10' : {                'score' : '<10%',                'label' : 'Low',                'advice' : ['Lifestyle-General'],                'follow_up' : '12 months'            },            '10-20' : {                'score' : '10-20%',                'label' : 'Low-Moderate',                'advice' : ['Lifestyle-General', 'Review-Targets'],                'follow_up' : 'Every 3 months until targets are met, then 6-9 months thereafter'            },            '20-30' : {                'score' : '20-30%',                'label' : 'Moderate',                'advice' : ['Lifestyle', 'Blood Pressure'],                'bp_target' : '140/90',                'follow_up' : 'Follow-up every 3-6 months'            },            '>30' : {                'score' : '>30%',                'label' : 'Medium',                'advice' : ['Lifestyle', 'Blood Pressure', 'Statin'],                'bp_target' : '130/80',                'follow_up' : 'ollow-up every 3 months, if there is no reduction in cardiovascular risk after six months of follow up refer to next level'            },            '>40' : {                'score' : '>40%',                'label' : 'High',                'advice' : ['Lifestyle', 'Blood Pressure', 'Statin', 'Refer'],                'bp_target' : '130/80',                'follow_up' : 'As per higher level of care'            },            'Refer' : {                'criteria' : { },                'label' : '',                'advice' : ['Lifestyle', '']            }    }}print highRiskConditionCheck(medical_history)print calcPhysicalActivity(physical_activity)print calcDiet(diet_history)print calcSmokingStatus(smoking)print calcDiabetesStatus(medical_history, bsl['type'], bsl['units'], bsl['value'])print calcDiabetesRisk(demographics['gender'], demographics['age'], calcBMI(measurements['height'], measurements['weight']), calcWHR(measurements['waist'], measurements['hip']), measurements['sbp'], measurements['dbp'])#print ("Risk is %s " % diabetes_risk)    